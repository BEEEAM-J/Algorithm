# 문제
# 홍준이는 요즘 주식에 빠져있다. 
# 그는 미래를 내다보는 눈이 뛰어나, 날 별로 주가를 예상하고 언제나 그게 맞아떨어진다. 
# 매일 그는 아래 세 가지 중 한 행동을 한다.

# 1. 주식 하나를 산다.
# 2. 원하는 만큼 가지고 있는 주식을 판다.
# 3. 아무것도 안한다.
# 홍준이는 미래를 예상하는 어떻게 해야 자신이 최대 이익을 얻을 수 있는지 모른다. 
# 따라서 당신에게 날 별로 주식의 가격을 알려주었을 때, 최대 이 뛰어난 안목을 가졌지만,익이 얼마나 되는지 계산을 해달라고 부탁했다.

# 예를 들어 날 수가 3일이고 날 별로 주가가 10, 7, 6일 때, 주가가 계속 감소하므로 최대 이익은 0이 된다. 
# 그러나 만약 날 별로 주가가 3, 5, 9일 때는 처음 두 날에 주식을 하나씩 사고, 마지막날 다 팔아 버리면 이익이 10이 된다.

# 입력
# 입력의 첫 줄에는 테스트케이스 수를 나타내는 자연수 T가 주어진다. 
# 각 테스트케이스 별로 첫 줄에는 날의 수를 나타내는 자연수 N(2 ≤ N ≤ 1,000,000)이 주어지고, 
# 둘째 줄에는 날 별 주가를 나타내는 N개의 자연수들이 공백으로 구분되어 순서대로 주어진다. 날 별 주가는 10,000이하다.

# 출력
# 각 테스트케이스 별로 최대 이익을 나타내는 정수 하나를 출력한다. 답은 부호있는 64bit 정수형으로 표현 가능하다.

T = int(input())
for i in range(T):
    max = 0
    res = 0
    N = int(input())
    stockPrice = map(int, input().split())
    stockPriceList = list(stockPrice)
    stockPriceList.reverse()
    for current in stockPriceList:
        if current >= max:                      # 현재 인덱스가 현재 범위에서 최대값인 경우
            max = current
        else:
            res += max - current                # 최대값이 아닌 경우
    print(res)

# 최대 이익을 내야하므로 현재 주식을 가장 비싸게 팔아야함
# 가장 비싸게 팔 수 있는 날까지 무조건 사고 해당 일에 판매를 한다.
# 근데 뒤에 날이 더 남아있으면 위의 과정을 반복해야함
# 이렇게 하면 남아있는 범위 내에서 최대 값을 구해야함

# 리스트를 거꾸로 뒤집어서 처리하게 되면 현재 인덱스까지의 max값과 비교를 해서 연산하면 됨
